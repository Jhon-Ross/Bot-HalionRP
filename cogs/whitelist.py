import discord
from discord import Interaction, app_commands, Forbidden, NotFound
from discord.ext import commands
from views.whitelist_view import WhitelistView
import os
import logging

# --- In√≠cio: Carregamento de Configura√ß√µes e Verifica√ß√µes Iniciais ---

WHITELIST_CHANNEL_ID = None
try:
    _whitelist_id_str = os.getenv("WHITELIST_ID")
    if _whitelist_id_str:
        WHITELIST_CHANNEL_ID = int(_whitelist_id_str)
        logging.info(
            f"ID do canal de Whitelist carregado: {WHITELIST_CHANNEL_ID}")
    else:
        logging.error(
            "WHITELIST_ID n√£o definido no .env! O comando /whitelist n√£o funcionar√°.")
except (TypeError, ValueError):
    logging.error("WHITELIST_ID inv√°lido no .env! Deve ser um n√∫mero inteiro.")
    WHITELIST_CHANNEL_ID = None


try:
    from cogs.verificacao import check_user_has_mod_role
    logging.info(
        "Fun√ß√£o check_user_has_mod_role importada de cogs.verificacao.")
except ImportError:
    logging.critical(
        "Falha ao importar 'check_user_has_mod_role' de cogs.verificacao. Verifique a estrutura de pastas e o arquivo.")
    # --- In√≠cio: Fun√ß√£o Fallback de Verifica√ß√£o de Cargo ---

    async def check_user_has_mod_role(interaction: Interaction) -> bool:
        logging.error(
            "Fun√ß√£o check_user_has_mod_role (fallback) ativada devido a erro de importa√ß√£o!")
        if not interaction.response.is_done():
            try:
                await interaction.response.send_message("‚ùå Erro cr√≠tico de configura√ß√£o do bot (verifica√ß√£o de permiss√£o). Contate um administrador.", ephemeral=True)
            except Exception:
                pass
        return False
    # --- Fim: Fun√ß√£o Fallback de Verifica√ß√£o de Cargo ---

logger = logging.getLogger(__name__)

# --- Fim: Carregamento de Configura√ß√µes e Verifica√ß√µes Iniciais ---


# --- In√≠cio: Defini√ß√£o da Classe Cog 'Whitelist' ---
class Whitelist(commands.Cog):
    # --- In√≠cio: M√©todo Construtor __init__ ---
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        self.whitelist_channel_id = WHITELIST_CHANNEL_ID
        logger.info(
            f"Whitelist Cog iniciado. Canal alvo ID: {self.whitelist_channel_id or 'N√ÉO CONFIGURADO!'}")
    # --- Fim: M√©todo Construtor __init__ ---

    # --- In√≠cio: Comando de Aplica√ß√£o /whitelist ---
    @app_commands.command(name="whitelist", description="Envia a mensagem de whitelist para o canal correto.")
    @app_commands.check(check_user_has_mod_role)
    async def whitelist(self, interaction: discord.Interaction):
        """Envia o painel de whitelist com bot√£o"""

        if self.whitelist_channel_id is None:
            logger.error(
                f"Usu√°rio {interaction.user} tentou usar /whitelist, mas WHITELIST_ID n√£o est√° configurado ou √© inv√°lido.")
            if not interaction.response.is_done():
                await interaction.response.send_message(
                    "‚ùå **Erro de Configura√ß√£o:** O canal para o comando whitelist n√£o foi definido corretamente no bot. Avise um administrador.",
                    ephemeral=True
                )
            return

        if interaction.channel_id != self.whitelist_channel_id:
            correct_channel_mention = f"<#{self.whitelist_channel_id}>"
            logger.warning(
                f"Usu√°rio {interaction.user} tentou usar /whitelist no canal errado ({interaction.channel.name}/{interaction.channel_id}). Canal correto: {self.whitelist_channel_id}")
            if not interaction.response.is_done():
                await interaction.response.send_message(
                    f"‚ö†Ô∏è **Canal Incorreto!** Este comando s√≥ pode ser utilizado no canal {correct_channel_mention}.",
                    ephemeral=True
                )
            return

        try:
            embed = discord.Embed(
                title="üèôÔ∏è Sua hist√≥ria em Halion RP est√° esperando por voc√™!",
                description=(
                    "Se voc√™ quer fazer parte de um RP imersivo, com liberdade para criar sua pr√≥pria jornada, "
                    "o primeiro passo √© iniciar seu teste de whitelist!\n\n"
                    "‚úÖ **Se estiver pronto(a) para viver numa cidade cheia de oportunidades, personagens √∫nicos e hist√≥rias √©picas, a decis√£o √© sua!**\n\n"
                    "‚ö†Ô∏è **Aten√ß√£o total necess√°ria!** Voc√™ ter√° apenas **20 minutos** para concluir o teste.\n"
                    "‚ùå Se o tempo acabar, a whitelist ser√° fechada e voc√™ s√≥ poder√° tentar novamente ap√≥s **30 minutos**.\n\n"
                    "üìç **Dicas para n√£o perder sua chance:**\n"
                    "- ‚ú® Escolha um local tranquilo, sem distra√ß√µes.\n"
                    "- üéß Use fones para maior concentra√ß√£o.\n"
                    "- üìù Leia cada pergunta com aten√ß√£o ‚Äì n√£o d√° pra voltar atr√°s!\n\n"
                    "üîò **Clique no bot√£o \"Quero fazer whitelist\" APENAS quando estiver:**\n"
                    "‚úî 100% focado(a)\n"
                    "‚úî Com tempo suficiente\n"
                    "‚úî Pronto(a) para encarar o desafio!\n\n"
                    "_\"Uma vaga na cidade √© conquistada por quem se prepara. Voc√™ vai encarar esse teste com a seriedade que ele merece?\"_"
                ),
                color=discord.Color.blue()
            )
            await interaction.response.send_message(embed=embed, view=WhitelistView())
            logger.info(
                f"Comando /whitelist executado com sucesso por {interaction.user} no canal {interaction.channel.name}")

        except Forbidden as e:
            logger.error(
                f"Erro de permiss√£o ao executar /whitelist por {interaction.user} no canal {interaction.channel.name}: {e}", exc_info=True)
            error_message = "‚ùå O bot n√£o tem permiss√£o para enviar mensagens ou embeds neste canal."
            try:
                if not interaction.response.is_done():
                    await interaction.response.send_message(error_message, ephemeral=True)
                else:
                    logger.warning(
                        "N√£o foi poss√≠vel notificar sobre erro de permiss√£o pois a intera√ß√£o j√° foi respondida.")
            except Exception as inner_e:
                logger.error(
                    f"Erro ao tentar enviar mensagem de erro de permiss√£o (whitelist): {inner_e}")

        except Exception as e:
            logger.error(
                f"Erro inesperado ao executar /whitelist por {interaction.user} no canal {interaction.channel.name}: {e}", exc_info=True)
            error_message = "‚ùå Ocorreu um erro inesperado ao tentar enviar o painel de whitelist."
            try:
                if not interaction.response.is_done():
                    await interaction.response.send_message(error_message, ephemeral=True)
                else:
                    try:
                        await interaction.followup.send(error_message, ephemeral=True)
                    except (NotFound, Forbidden):
                        logger.warning(
                            f"N√£o foi poss√≠vel enviar followup de erro do /whitelist para {interaction.user} (intera√ß√£o/permiss√£o).")
                    except Exception as follow_e:
                        logger.error(
                            f"Erro no followup de erro /whitelist: {follow_e}")
            except Exception as resp_e:
                logger.error(
                    f"Erro ao tentar enviar mensagem de erro gen√©rico (whitelist): {resp_e}")
    # --- Fim: Comando de Aplica√ß√£o /whitelist ---

    # --- In√≠cio: Tratador de Erros do Cog (cog_app_command_error) ---
    async def cog_app_command_error(self, interaction: Interaction, error: app_commands.AppCommandError):
        """Trata erros para os comandos de aplicativo neste Cog, principalmente CheckFailure."""
        command_name = interaction.command.name if interaction.command else "desconhecido"

        if isinstance(error, app_commands.CheckFailure):
            logger.warning(
                f"CheckFailure pego por cog_app_command_error para o comando '{command_name}' por {interaction.user}. Verifica√ß√£o de cargo falhou.")

            custom_error_message = "üö´ Voc√™ n√£o tem permiss√£o (cargo n√£o autorizado) para usar este comando."
            try:
                if not interaction.response.is_done():
                    await interaction.response.send_message(custom_error_message, ephemeral=True)
                else:
                    await interaction.followup.send(custom_error_message, ephemeral=True)
            except (NotFound, Forbidden):
                logger.warning(
                    f"N√£o foi poss√≠vel enviar mensagem de erro de permiss√£o (whitelist CheckFailure) para {interaction.user}.")
            except Exception as e_resp:
                logger.error(
                    f"Erro ao enviar mensagem de erro de permiss√£o (whitelist CheckFailure) para {interaction.user}: {e_resp}", exc_info=True)
            return

        logger.error(
            f"Erro inesperado n√£o tratado pego por cog_app_command_error no comando '{command_name}' por {interaction.user}: {error}",
            exc_info=True
        )
        generic_error_message = "‚ùå Ocorreu um erro inesperado e n√£o tratado ao processar este comando."
        try:
            if not interaction.response.is_done():
                await interaction.response.send_message(generic_error_message, ephemeral=True)
            else:
                await interaction.followup.send(generic_error_message, ephemeral=True)
        except (NotFound, Forbidden):
            logger.warning(
                f"N√£o foi poss√≠vel enviar mensagem de erro gen√©rico (whitelist cog_app_command_error) para {interaction.user}.")
        except Exception as e_resp:
            logger.error(
                f"Erro ao enviar mensagem de erro gen√©rico (whitelist cog_app_command_error) para {interaction.user}: {e_resp}", exc_info=True)
    # --- Fim: Tratador de Erros do Cog (cog_app_command_error) ---

# --- Fim: Defini√ß√£o da Classe Cog 'Whitelist' ---


# --- In√≠cio: Fun√ß√£o setup (Carregamento do Cog) ---
async def setup(bot: commands.Bot):
    if WHITELIST_CHANNEL_ID is None:
        logging.error("*"*50)
        logging.error(
            "Cog Whitelist N√ÉO ser√° carregado porque WHITELIST_ID est√° ausente ou inv√°lido no .env.")
        logging.error("*"*50)
        return

    if 'check_user_has_mod_role' not in globals() or not callable(check_user_has_mod_role):
        logging.warning("*"*50)
        logging.warning("Cog Whitelist ser√° carregado, mas a fun√ß√£o de verifica√ß√£o de cargo 'check_user_has_mod_role' n√£o foi importada corretamente (usando fallback). A permiss√£o pode n√£o funcionar como esperado.")
        logging.warning("*"*50)

    await bot.add_cog(Whitelist(bot))
    logger.info("Cog Whitelist carregado com sucesso.")
# --- Fim: Fun√ß√£o setup (Carregamento do Cog) ---
